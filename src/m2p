#!/usr/bin/perl

#  Convert a letter matrix to individual pieces in the box
#  Usage:   m2p <matrix_file >pieces_file

#  suck it in
@matfile = <>;
$lines = $#matfile + 1;
if($lines == 0) {
print "input file is empty\n";
exit 1
}

#dimensions
$dim_x = 0, $dim_y = 0, $dim_z = 1;

for(my $i=0; $i<$lines; ++$i) {
chomp $matfile[$i];
++$dim_z if $matfile[$i] =~ /^-/;
}

$dim_x = length $matfile[0];
$dim_y = ($lines - $dim_z + 1) / $dim_z;

#  test/debug
# print "dimensions $dim_x by $dim_y by $dim_z\n";

my ($x, $y, $z);
my ($x0, $y0, $z0);
@box = [];

#  build and populate the 3 dimensional array.
for($z=0; $z<$dim_z; ++$z) {
$box[$z] = [];
for($y=0; $y<$dim_y; ++$y) {
$box[$z][$y] = [];
my $s = $matfile[$y + $z*($dim_y+1)];
for($x=0; $x<$dim_x; ++$x) {
$box[$z][$y][$x] = substr $s, $x, 1;
}
}
}

#  determine pieces
for($z0=0; $z0<$dim_z; ++$z0) {
for($y0=0; $y0<$dim_y; ++$y0) {
for($x0=0; $x0<$dim_x; ++$x0) {
my $c = $box[$z0][$y0][$x0];
# $c is the color, or letter, of the entry,
# it turns to * when the piece is determined and printed.
next if $c eq '*';

my @qx = [], @qy = [], @qz = [];
$qx[0] = $x0, $qy[0] = $y0, $qz[0] = $z0;
my $nsq1 = 0, $nsq2 = 1;
my ($d, $k);

while($nsq1 < $nsq2) {
$x = $qx[$nsq1], $y = $qy[$nsq1], $z = $qz[$nsq1];
++$nsq1;

if($x > 0 and ($d = $box[$z][$y][$x-1]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x-1 eq $qx[$k] and $y eq $qy[$k] and $z eq $qz[$k];
}
$qx[$k] = $x-1, $qy[$k] = $y, $qz[$k] = $z, ++$nsq2 if $k == $nsq2;
}
if($y > 0 and ($d = $box[$z][$y-1][$x]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x eq $qx[$k] and $y-1 eq $qy[$k] and $z eq $qz[$k];
}
$qx[$k] = $x, $qy[$k] = $y-1, $qz[$k] = $z, ++$nsq2 if $k == $nsq2;
}
if($z > 0 and ($d = $box[$z-1][$y][$x]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x eq $qx[$k] and $y eq $qy[$k] and $z-1 eq $qz[$k];
}
$qx[$k] = $x, $qy[$k] = $y, $qz[$k] = $z-1, ++$nsq2 if $k == $nsq2;
}
if($x < $dim_x-1 and ($d = $box[$z][$y][$x+1]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x+1 eq $qx[$k] and $y eq $qy[$k] and $z eq $qz[$k];
}
$qx[$k] = $x+1, $qy[$k] = $y, $qz[$k] = $z, ++$nsq2 if $k == $nsq2;
}
if($y < $dim_y-1 and ($d = $box[$z][$y+1][$x]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x eq $qx[$k] and $y+1 eq $qy[$k] and $z eq $qz[$k];
}
$qx[$k] = $x, $qy[$k] = $y+1, $qz[$k] = $z, ++$nsq2 if $k == $nsq2;
}
if($z < $dim_z-1 and ($d = $box[$z+1][$y][$x]) eq $c) {
for($k=0; $k<$nsq2; ++$k) {
last if $x eq $qx[$k] and $y eq $qy[$k] and $z+1 eq $qz[$k];
}
$qx[$k] = $x, $qy[$k] = $y, $qz[$k] = $z+1, ++$nsq2 if $k == $nsq2;
}
}

#  piece is built, has nsq2 cubes.
#  Print it out in whatever format you wish here.
for($k=0; $k<$nsq2; ++$k) {
print $qx[$k].",".$qy[$k].",".$qz[$k]."\n";
}
#  blakn line to separate pieces
print "\n";

# Turn piece into stars so we don't run into it again.
for($k=0; $k<$nsq2; ++$k) {
$box[$qz[$k]][$qy[$k]][$qx[$k]] = '*';
}
}
}
}

exit 0
